events {
	worker_connections 1024;
}

http {
	lua_shared_dict dogs 1m;
	lua_package_path "lua/?.lua;;";
	server {
		listen 8080;
		location / {
			content_by_lua_file lua/hello.lua;
		}

		location = /t {
			content_by_lua_block {
				require("myapp").go();
			}
		}

		location = /test {
			content_by_lua_block {
				local dogs = ngx.shared.dogs
				dogs:set("a", 8)
				local ok, err = dogs:get("a")
				if not ok then
					ngx.say("not ok: ", err)
					return
				end
				ngx.say("ok")
				ngx.say(ok)
			}
		}


		location = /demo {
			content_by_lua_block {
				local dogs = ngx.shared.dogs
				dogs:set("Jim", 8)
				local v, err = dogs:get("Jim")
				if v == nil and err then
					ngx.say("get not ok: ", err)
					return
				end
				ngx.say(v)
			}
		}
	}
}
